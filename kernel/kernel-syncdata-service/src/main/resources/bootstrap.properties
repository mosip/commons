#spring.cloud.config.uri=localhost
#spring.cloud.config.label=master
#spring.profiles.active=dev
spring.cloud.config.name=kernel
spring.application.name=kernel-syncdata-service
#management.security.enabled=false
#management.endpoint.health.show-details=when-authorized
#management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health,refresh,mappings

server.port=8089
server.servlet.path=/v1/syncdata


#javax.persistence.jdbc.url=${syncdata_database_url}
#javax.persistence.jdbc.user=${syncdata_database_username}
#javax.persistence.jdbc.password=${syncdata_database_password}

spring.datasource.driverClassName=org.postgresql.Driver
# config properties for master alone 
spring.master-datasource.jdbcUrl=${syncdata_database_url}
spring.master-datasource.username=${syncdata_database_username}
spring.master-datasource.password=${syncdata_database_password}

# config properties for kernel alone
spring.kernel-datasource.jdbcUrl=${syncjob_database_url}
spring.kernel-datasource.username=${syncjob_database_username}
spring.kernel-datasource.password=${syncjob_database_password}

#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults= false
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#spring.jpa.database=POSTGRESQL
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#disabling health check so that client doesnt try to load properties from sprint config server every
# 5 minutes (should not be done in production)
health.config.enabled=false

#To handle LocalTime, LocalDate and LocalDateTime during sync json.
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false